module Kitchen
  module Provisioner
    class YansiblePusher < Kitchen::Provisioner::Base
      extend Kitchen::Configurable::ClassMethods

      @sandbox_path: String

      def self.kitchen_provisioner_api_version: () -> Integer
      def self.plugin_version: () -> String

      def install_command: () -> nil
      def init_command: () -> nil
      def prepare_command: () -> nil
      def run_command: () -> void

      private

      def run_ansible: () -> void
      def create_inventory: () -> String
      def build_inventory: () -> Hash[String, Hash[String, Hash[String, Hash[String, String | Integer]]]]
      def build_host_config: (Hash[Symbol, String | Integer]) -> Hash[String, String | Integer]
      def write_inventory_file: (Hash[String, Hash[String, Hash[String, Hash[String, String | Integer]]]]) -> String
      def build_ansible_command: () -> String
      def ansible_options: () -> Array[Symbol]
      def ansible_config: (Array[String]) -> Array[String]
      def ansible_env_vars: (Array[String]) -> Array[String]
      def ansible_tags: (Array[String]) -> Array[String]
      def ansible_skip_tags: (Array[String]) -> Array[String]
      def ansible_use_private_key: (Array[String]) -> Array[String]
      def ansible_use_vault_password_file: (Array[String]) -> Array[String]
      def ansible_verbosity: (Array[String]) -> Array[String]
      def create_sandbox: () -> void
      def cleanup_sandbox: () -> void
    end
  end

  module Yansible
    module Pusher
      VERSION: String
    end
  end

  class Instance
    def name: () -> String
    def transport: () -> untyped
  end

  module Configurable
    module ClassMethods
      def default_config: (Symbol, untyped) -> void
    end
  end
end